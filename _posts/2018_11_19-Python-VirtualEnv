---
layout: post
title:  "3 Ways of Installing Multiple Python Versions On Same Machine"
date:   2018-12-25 10:04:04
author: Ayush Vatsyayan
categories: Python
tags:	    python
cover:  "/assets/instacode.png"
---

Imagine you have an application that needs version 2.7 of Python, but another application requires version 3.0. How can you use both these applications? 
Or more generally, what if you want to install an application and leave it be? If an application works, any change in its libraries or the versions of those libraries can break the application.
Also, what if you can’t install packages into the global site-packages directory? For instance, on a shared host.

In all these cases, virtualenv can help you. It creates an environment that has its own installation directories, that doesn’t share libraries with other virtualenv environments (and optionally doesn’t access the globally installed libraries either).

Virtualenvs makes it easier to work on more than one project at a time without introducing conflicts in their dependencies.

# What is Virtual Environment
Virtual Environment is a cooperatively isolated runtime environment that allows Python users and applications to install and upgrade Python distribution packages without interfering with the behaviour of other Python applications running on the same system. This means that you can have two versions of python installed on the same machine.

The `venv` module provides support for creating lightweight “virtual environments” with their own site directories, optionally isolated from system site directories. Each virtual environment has its own Python binary (which matches the version of the binary that was used to create this environment) and can have its own independent set of installed Python packages in its site directories.


# Ways of using it


# References
* https://www.python.org/dev/peps/pep-0405/
* http://www.virtualenv.org


